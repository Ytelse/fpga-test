PACKAGE_NAME = Bram
.DEFAULT_GOAL = upload

############################################
## Build commands
# -------------------------------------
# Note: DCP = Design Check-Point

WORKDIR := ${CURDIR}/work
SRCDIR := ${WORKDIR}/src
TESTDIR := ${CURDIR}/tests
TESTRESDIR := ${WORKDIR}/test-results
VIVADO := /opt/Xilinx/Vivado/2016.2/bin/vivado -tempDir ${WORKDIR}
SCRIPTDIR := ${CURDIR}/buildscripts
TESTSCRIPTDIR := ${CURDIR}/testscripts
SYNTH_DCP := ${WORKDIR}/synth.dcp
PLACE_DCP := ${WORKDIR}/place.dcp
ROUTE_DCP := ${WORKDIR}/route.dcp
BITFILE   := ${WORKDIR}/${PACKAGE_NAME}-Top.bit
BINFILE   := ${WORKDIR}/${PACKAGE_NAME}-Top.bin

CHISELFILES := $(shell find ${CURDIR} -iname '*scala')
BLOCK_PERIOD := 1234

.PHONY: cs synth impl trans map par postpar_timing_report bitgen clean purge

############################################
## Design compilation commands
# -------------------------------------

chisel: ${CHISELFILES} ${SRCDIR}
	@sbt "runMain ${PACKAGE_NAME}.Main --backend v --targetDir ${SRCDIR}"

# Synthesize: elaborates the design (inferring hardware), and creates an FPGA
# (LUT-based) implementation of it.
synth: ${SYNTH_DCP}
	@echo "Synthesis complete"

# Placement: decides where on the FPGA the components of the implementation
# should be placed.
place: ${PLACE_DCP}
	@echo "Placement complete"

# Routing: determines which physical interconnect routes should be used to
# connect together the physical components of the implementation.
route: ${ROUTE_DCP}
	@echo "Routing complete"

# Bitgen: creates a binary file which specifies how to set the configuration
# bits of the FPGA so that it reflects the implementation generated by placement
# and routing.
bitgen: ${BITFILE}
	@echo "Bitfile generation complete"

upload: chisel ${BITFILE}
	${VIVADO} -mode batch -source ${SCRIPTDIR}/program_bitfile.tcl -tclargs ${BITFILE} | tee ${SYNTH_LOG}

clean:
	@-rm -f ${CURDIR}/*.jou ${CURDIR}/*.log
	@-rm -rf ${WORKDIR}

purge: clean
	@-rm -rf ${BINFILE} ${BITFILE}


############################################
## Test commands
# -------------------------------------

.PHONY: test_%

# Run a given test bench in the tests/ folder. Invoke this rule by typing 'make
# test_<testbench name>' in the terminal; for example, "make test_stack_tb".
test_%: ${TESTRESDIR}/%.wdb
	@echo -en "\nDo you wish to open the waveform in Vivado? (yes/no) " && \
	read answer && \
	if echo "$$answer" | grep -iq "^y.*"; then \
		cd ${TESTRESDIR} && \
		${TESTSCRIPTDIR}/open_waveform.sh "$<"; \
	else \
		echo "OK - bye!"; \
	fi

############################################
## Command implementation details
# -------------------------------------

RPT_DIR = ${CURDIR}/reports
SYNTH_UTIL_RPT = ${RPT_DIR}/synth_util.rpt
SYNTH_TIMING_RPT = ${RPT_DIR}/synth_timing.rpt
SYNTH_TIMING_SUMMARY = ${RPT_DIR}/synth_timing.summary
SYNTH_DRC_RPT = ${RPT_DIR}/synth_design_rule_check.rpt
SYNTH_LOG = ${RPT_DIR}/synth.log

PLACE_CLOCK_UTIL_RPT = ${RPT_DIR}/place_clock_util.rpt
PLACE_UTIL_RPT = ${RPT_DIR}/place_util.rpt
PLACE_TIMING_RPT = ${RPT_DIR}/place_timing.rpt
PLACE_TIMING_SUMMARY = ${RPT_DIR}/place_timing.summary
PLACE_LOG = ${RPT_DIR}/place.log

ROUTE_UTIL_RPT = ${RPT_DIR}/route_util.rpt
ROUTE_TIMING_RPT = ${RPT_DIR}/route_timing.rpt
ROUTE_TIMING_SUMMARY = ${RPT_DIR}/route_timing.summary
ROUTE_POWER_RPT = ${RPT_DIR}/route_power.rpt
ROUTE_LOG = ${RPT_DIR}/route.log

BITGEN_DRC_RPT = ${RPT_DIR}/bitgen_design_rule_check.rpt
BITGEN_LOG = ${RPT_DIR}/bitgen.log

SRC_FILES = $(shell find -L ${SRCDIR} -name '*.v')
TEST_FILES = $(shell find -L ${SRCDIR} -name '*.v')

## Call the top level "Top_cfg" for all exercises, to make it easy to reuse the
## Makefile.
SYNTH_TOP ?= ${PACKAGE_NAME}

${SRCDIR}:
	mkdir -p $@

${WORKDIR}:
	mkdir -p $@

${SYNTH_DCP}: ${SRC_FILES} ${WORKDIR}
	@echo "Starting synthesis"
	@echo "========================"
	@cd ${WORKDIR} && \
		env TOPDIR=${CURDIR} \
		SRCDIR=${SRCDIR} \
	  DCP=${SYNTH_DCP} \
	  UTIL_RPT=${SYNTH_UTIL_RPT} \
	  TIMING_RPT=${SYNTH_TIMING_RPT} \
	  TIMING_SUMMARY=${SYNTH_TIMING_SUMMARY} \
    DRC_RPT=${SYNTH_DRC_RPT} \
	  TOP=${SYNTH_TOP} \
		${VIVADO} -mode batch -source ${SCRIPTDIR}/synthesize.tcl |\
      tee ${SYNTH_LOG}

${PLACE_DCP}: ${SYNTH_DCP}
	@echo "Starting placement"
	@echo "========================"
	@cd ${WORKDIR} && \
		env DCP=${PLACE_DCP} \
		CLOCK_UTIL_RPT=${PLACE_CLOCK_UTIL_RPT} \
		UTIL_RPT=${PLACE_UTIL_RPT} \
		TIMING_RPT=${PLACE_TIMING_RPT} \
	  TIMING_SUMMARY=${PLACE_TIMING_SUMMARY} \
	${VIVADO} -mode batch $< -source ${SCRIPTDIR}/place.tcl |\
      tee ${PLACE_LOG}

${ROUTE_DCP}: ${PLACE_DCP}
	@echo "Starting routing"
	@echo "========================"
	@cd ${WORKDIR} && \
		env DCP=${ROUTE_DCP} \
		UTIL_RPT=${ROUTE_UTIL_RPT} \
		TIMING_RPT=${ROUTE_TIMING_RPT} \
		TIMING_SUMMARY=${ROUTE_TIMING_SUMMARY} \
	  POWER_RPT=${ROUTE_POWER_RPT} \
		${VIVADO} -mode batch $< -source ${SCRIPTDIR}/route.tcl |\
      tee ${ROUTE_LOG}

${BITFILE}: ${ROUTE_DCP}
	@echo "Starting bitgen"
	@echo "========================"
	@cd ${WORKDIR} && \
		env BITFILE=${BITFILE} \
    DRC_REPORT=${BITGEN_DRC_RPT} \
		${VIVADO} -mode batch $< -source ${SCRIPTDIR}/bitgen.tcl |\
      tee ${BITGEN_LOG}

${TESTRESDIR}:
	mkdir -p $@

.PRECIOUS: ${TESTRESDIR}/%.wdb
${TESTRESDIR}/%.wdb: ${TESTRESDIR}/sim-prj.prj ${TESTDIR}/%.vhd
	@cd $(@D) && \
	echo -e "Running test bench $* in $(@D)\n" && \
	${TESTSCRIPTDIR}/run_single_test.sh "$<" "$*" && \
	cp -v $*/waveform.wdb $@ && \
	cd -

${TESTRESDIR}/sim-prj.prj: ${TESTRESDIR} ${SRC_FILES} ${TEST_FILES}
	@${TESTSCRIPTDIR}/gen_prj.sh ${CURDIR} > $@

${TESTDIR}/%.vhd:
	@echo "No test bench file named $$(basename ${TESTDIR})/$*.vhd!" >&2
	@exit 1

.PHONY: print_debug
print_debug:
	@echo "SRC_FILES = ${SRC_FILES}"
	@echo "TEST_FILES = ${TEST_FILES}"
	@echo "SYNTH_DCP = ${SYNTH_DCP}"
	@echo "TRANS_DCP = ${TRANS_DCP}"
	@echo "MAP_DCP = ${MAP_DCP}"
	@echo "PAR_DCP = ${PAR_DCP}"
	@echo "POSTPAR_TIMING_DCP = ${POSTPAR_TIMING_DCP}"
	@echo "TESTRESDIR = ${TESTRESDIR}"
	@echo "TESTDIR = ${TESTDIR}"
